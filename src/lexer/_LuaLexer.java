/* The following code was generated by JFlex 1.4.1 on 3/24/10 11:20 PM */

package com.sylvanaar.idea.Lua.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import java.util.*;
import java.lang.reflect.Field;
import org.jetbrains.annotations.NotNull;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1
 * on 3/24/10 11:20 PM from the specification file
 * <tt>lua.flex</tt>
 */
class _LuaLexer implements FlexLexer, LuaTokenTypes {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;
  private static final String ZZ_NL = System.getProperty("line.separator");

  /** lexical states */
  public static final int XLONGSTRING = 1;
  public static final int XSTRINGA = 5;
  public static final int XLONGCOMMENT = 3;
  public static final int XSHORTCOMMENT = 2;
  public static final int YYINITIAL = 0;
  public static final int XSTRINGQ = 4;

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\1\1\3\1\0\1\1\1\2\22\0\1\1\1\0\1\37"+
    "\1\54\1\0\1\45\1\0\1\40\1\47\1\50\1\44\1\10\1\55"+
    "\1\35\1\11\1\46\12\6\1\57\1\56\1\42\1\12\1\41\2\0"+
    "\4\4\1\7\25\4\1\36\1\61\1\51\1\60\1\4\1\0\1\13"+
    "\1\16\1\30\1\15\1\20\1\26\1\4\1\33\1\25\1\4\1\21"+
    "\1\23\1\4\1\14\1\22\1\32\1\4\1\17\1\24\1\31\1\27"+
    "\1\5\1\34\3\4\1\52\1\0\1\53\1\43\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\6\0\1\1\1\2\2\3\1\4\1\2\1\5\1\6"+
    "\1\7\1\10\15\4\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\1\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\2\34"+
    "\1\35\1\36\2\37\1\40\1\41\1\42\1\40\1\43"+
    "\1\42\1\40\2\0\1\44\1\45\3\4\1\46\4\4"+
    "\1\47\1\4\1\50\1\51\7\4\1\52\1\0\1\53"+
    "\1\54\1\55\1\56\1\0\1\57\1\0\1\60\1\42"+
    "\1\5\1\0\1\5\1\61\1\62\1\63\1\64\3\4"+
    "\1\65\3\4\1\66\5\4\2\0\1\53\3\4\1\67"+
    "\4\4\1\70\1\71\1\4\1\72\1\73\3\4\1\74"+
    "\1\75\1\4\1\76\1\77\1\100\1\101\1\102\2\4"+
    "\1\103";

  private static int [] zzUnpackAction() {
    int [] result = new int[146];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\62\0\144\0\226\0\310\0\372\0\u012c\0\u015e"+
    "\0\u0190\0\u012c\0\u01c2\0\u01f4\0\u0226\0\u012c\0\u0258\0\u028a"+
    "\0\u02bc\0\u02ee\0\u0320\0\u0352\0\u0384\0\u03b6\0\u03e8\0\u041a"+
    "\0\u044c\0\u047e\0\u04b0\0\u04e2\0\u0514\0\u0546\0\u0578\0\u012c"+
    "\0\u012c\0\u05aa\0\u05dc\0\u060e\0\u012c\0\u012c\0\u012c\0\u012c"+
    "\0\u012c\0\u012c\0\u012c\0\u012c\0\u012c\0\u012c\0\u012c\0\u012c"+
    "\0\u012c\0\u012c\0\u0640\0\u012c\0\u012c\0\u012c\0\u0672\0\u012c"+
    "\0\u012c\0\u06a4\0\u06d6\0\u012c\0\u0708\0\u073a\0\u076c\0\u079e"+
    "\0\u07d0\0\u012c\0\u0802\0\u0834\0\u0866\0\u01c2\0\u0898\0\u08ca"+
    "\0\u08fc\0\u092e\0\u01c2\0\u0960\0\u01c2\0\u01c2\0\u0992\0\u09c4"+
    "\0\u09f6\0\u0a28\0\u0a5a\0\u0a8c\0\u0abe\0\u0af0\0\u0578\0\u0b22"+
    "\0\u012c\0\u012c\0\u012c\0\u0640\0\u012c\0\u0672\0\u012c\0\u012c"+
    "\0\u0b54\0\u0b54\0\u0b86\0\u012c\0\u01c2\0\u01c2\0\u01c2\0\u0bb8"+
    "\0\u0bea\0\u0c1c\0\u01c2\0\u0c4e\0\u0c80\0\u0cb2\0\u01c2\0\u0ce4"+
    "\0\u0d16\0\u0d48\0\u0d7a\0\u0dac\0\u0dde\0\u0b22\0\u012c\0\u0e10"+
    "\0\u0e42\0\u0e74\0\u0ea6\0\u0ed8\0\u0f0a\0\u0f3c\0\u0f6e\0\u01c2"+
    "\0\u01c2\0\u0fa0\0\u012c\0\u01c2\0\u0fd2\0\u1004\0\u1036\0\u01c2"+
    "\0\u01c2\0\u1068\0\u01c2\0\u01c2\0\u01c2\0\u01c2\0\u01c2\0\u109a"+
    "\0\u10cc\0\u01c2";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[146];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\13"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\13\1\27\1\30\1\13\1\31\1\32\1\33"+
    "\1\13\1\34\2\13\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51"+
    "\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61"+
    "\1\7\51\62\1\63\10\62\2\64\2\65\56\64\51\66"+
    "\1\67\10\66\2\70\2\71\33\70\1\72\21\70\1\73"+
    "\2\70\2\74\34\70\1\75\20\70\1\76\63\0\1\10"+
    "\3\0\1\10\57\0\1\12\62\0\4\13\3\0\22\13"+
    "\26\0\1\10\2\0\1\13\1\14\2\13\3\0\22\13"+
    "\33\0\1\15\1\77\1\0\1\100\6\0\1\77\52\0"+
    "\1\101\62\0\1\102\53\0\4\13\3\0\1\13\1\103"+
    "\20\13\31\0\4\13\3\0\7\13\1\104\2\13\1\105"+
    "\7\13\31\0\4\13\3\0\7\13\1\106\12\13\31\0"+
    "\4\13\3\0\4\13\1\107\15\13\31\0\4\13\3\0"+
    "\5\13\1\110\14\13\31\0\4\13\3\0\1\13\1\111"+
    "\6\13\1\112\11\13\31\0\4\13\3\0\4\13\1\113"+
    "\15\13\31\0\4\13\3\0\7\13\1\114\12\13\31\0"+
    "\4\13\3\0\1\13\1\115\11\13\1\116\6\13\31\0"+
    "\4\13\3\0\1\117\6\13\1\120\4\13\1\121\5\13"+
    "\31\0\4\13\3\0\1\13\1\122\20\13\31\0\4\13"+
    "\3\0\4\13\1\123\13\13\1\124\1\13\31\0\4\13"+
    "\3\0\20\13\1\125\1\13\62\0\1\126\36\0\1\127"+
    "\23\0\1\130\35\0\1\131\61\0\1\132\61\0\1\133"+
    "\61\0\1\134\36\0\1\135\22\0\1\136\36\0\1\137"+
    "\47\0\1\70\25\0\1\70\1\0\1\70\5\0\2\70"+
    "\1\0\2\70\6\0\1\70\2\0\1\70\4\0\1\70"+
    "\1\140\1\70\10\0\1\70\7\0\1\70\40\0\1\70"+
    "\24\0\1\70\1\0\1\70\5\0\2\70\1\0\2\70"+
    "\6\0\1\70\2\0\1\70\4\0\1\70\1\0\1\70"+
    "\10\0\1\70\7\0\1\70\6\0\1\141\1\0\1\142"+
    "\24\0\1\142\32\0\1\143\64\0\1\144\54\0\4\13"+
    "\3\0\2\13\1\145\17\13\31\0\4\13\3\0\16\13"+
    "\1\146\3\13\31\0\4\13\3\0\10\13\1\147\11\13"+
    "\31\0\4\13\3\0\5\13\1\150\14\13\31\0\4\13"+
    "\3\0\16\13\1\151\1\152\2\13\31\0\4\13\3\0"+
    "\2\13\1\153\17\13\31\0\4\13\3\0\11\13\1\154"+
    "\10\13\31\0\4\13\3\0\15\13\1\155\4\13\31\0"+
    "\4\13\3\0\10\13\1\156\11\13\31\0\4\13\3\0"+
    "\4\13\1\157\15\13\31\0\4\13\3\0\1\13\1\160"+
    "\20\13\31\0\4\13\3\0\16\13\1\161\3\13\31\0"+
    "\4\13\3\0\14\13\1\162\5\13\31\0\4\13\3\0"+
    "\5\13\1\163\14\13\31\0\4\13\3\0\12\13\1\164"+
    "\7\13\63\0\1\165\24\0\1\166\1\0\1\167\1\0"+
    "\1\166\62\0\1\141\61\0\1\143\1\77\10\0\1\77"+
    "\45\0\4\13\3\0\1\170\21\13\31\0\4\13\3\0"+
    "\14\13\1\171\5\13\31\0\4\13\3\0\5\13\1\172"+
    "\14\13\31\0\4\13\3\0\5\13\1\173\14\13\31\0"+
    "\4\13\3\0\1\174\21\13\31\0\4\13\3\0\11\13"+
    "\1\175\10\13\31\0\4\13\3\0\15\13\1\176\4\13"+
    "\31\0\4\13\3\0\12\13\1\177\7\13\31\0\4\13"+
    "\3\0\5\13\1\200\14\13\31\0\4\13\3\0\1\13"+
    "\1\201\20\13\31\0\4\13\3\0\10\13\1\202\11\13"+
    "\37\0\1\165\23\0\1\203\27\0\4\13\3\0\6\13"+
    "\1\204\13\13\31\0\4\13\3\0\4\13\1\205\15\13"+
    "\31\0\4\13\3\0\1\206\21\13\31\0\4\13\3\0"+
    "\12\13\1\207\7\13\31\0\4\13\3\0\10\13\1\210"+
    "\11\13\31\0\4\13\3\0\5\13\1\211\14\13\31\0"+
    "\4\13\3\0\16\13\1\212\3\13\31\0\4\13\3\0"+
    "\10\13\1\213\11\13\31\0\4\13\3\0\5\13\1\214"+
    "\14\13\31\0\4\13\3\0\1\13\1\215\20\13\31\0"+
    "\4\13\3\0\16\13\1\216\3\13\31\0\4\13\3\0"+
    "\13\13\1\217\6\13\31\0\4\13\3\0\12\13\1\220"+
    "\7\13\31\0\4\13\3\0\7\13\1\221\12\13\31\0"+
    "\4\13\3\0\1\13\1\222\20\13\25\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[4350];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\6\0\1\11\2\1\1\11\3\1\1\11\21\1\2\11"+
    "\3\1\16\11\1\1\3\11\1\1\2\11\2\1\1\11"+
    "\2\1\2\0\1\1\1\11\24\1\1\0\1\1\3\11"+
    "\1\0\1\11\1\0\2\11\1\1\1\0\1\1\1\11"+
    "\20\1\2\0\1\11\13\1\1\11\17\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[146];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    int yyline, yychar, yycolumn;



  _LuaLexer(java.io.Reader in) {
  
   
//    morePrefix = new StringBuffer();
//    clearMorePrefix = true;

    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  _LuaLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 136) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  public void reset(CharSequence buffer, int initialState){
    reset(buffer, 0, buffer.length(), initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL.charAt(zzCurrentPosL)) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL.charAt(zzMarkedPosL) == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL.charAt(zzMarkedPosL) == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = zzLexicalState;


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL.charAt(zzCurrentPosL++);
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL.charAt(zzCurrentPosL++);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 41: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [71] { return IF; }");
          { return IF;
          }
        case 68: break;
        case 67: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [70] { return FUNCTION; }");
          { return FUNCTION;
          }
        case 69: break;
        case 27: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [121] { return EXP; }");
          { return EXP;
          }
        case 70: break;
        case 35: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [153] { yybegin(YYINITIAL);return WRONG; }");
          { yybegin(YYINITIAL);return WRONG;
          }
        case 71: break;
        case 14: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [109] { return LT; }");
          { return LT;
          }
        case 72: break;
        case 53: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [67] { return END; }");
          { return END;
          }
        case 73: break;
        case 36: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [97] { return CONCAT; }");
          { return CONCAT;
          }
        case 74: break;
        case 15: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [104] { return MULT; }");
          { return MULT;
          }
        case 75: break;
        case 2: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [95] { return WS; }");
          { return WS;
          }
        case 76: break;
        case 48: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [174] { yybegin(YYINITIAL); return LONGCOMMENT; }");
          { yybegin(YYINITIAL); return LONGCOMMENT;
          }
        case 77: break;
        case 3: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [122] { return NEWLINE; }");
          { return NEWLINE;
          }
        case 78: break;
        case 10: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [112] { return LBRACK; }");
          { return LBRACK;
          }
        case 79: break;
        case 20: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [113] { return RBRACK; }");
          { return RBRACK;
          }
        case 80: break;
        case 23: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [116] { return GETN; }");
          { return GETN;
          }
        case 81: break;
        case 65: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [77] { return REPEAT; }");
          { return REPEAT;
          }
        case 82: break;
        case 49: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [96] { return ELLIPSIS; }");
          { return ELLIPSIS;
          }
        case 83: break;
        case 21: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [114] { return LCURLY; }");
          { return LCURLY;
          }
        case 84: break;
        case 5: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [84] { return NUMBER; }");
          { return NUMBER;
          }
        case 85: break;
        case 16: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [105] { return MOD; }");
          { return MOD;
          }
        case 86: break;
        case 22: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [115] { return RCURLY; }");
          { return RCURLY;
          }
        case 87: break;
        case 61: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [68] { return FALSE; }");
          { return FALSE;
          }
        case 88: break;
        case 42: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [88] { yybegin( XSHORTCOMMENT ); return SHORTCOMMENT; }");
          { yybegin( XSHORTCOMMENT ); return SHORTCOMMENT;
          }
        case 89: break;
        case 43: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [90] { yybegin( XLONGSTRING ); }");
          { yybegin( XLONGSTRING );
          }
        case 90: break;
        case 24: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [117] { return COMMA; }");
          { return COMMA;
          }
        case 91: break;
        case 7: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [120] { return DOT; }");
          { return DOT;
          }
        case 92: break;
        case 40: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [72] { return IN; }");
          { return IN;
          }
        case 93: break;
        case 39: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [76] { return OR; }");
          { return OR;
          }
        case 94: break;
        case 25: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [118] { return SEMI; }");
          { return SEMI;
          }
        case 95: break;
        case 17: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [106] { return DIV; }");
          { return DIV;
          }
        case 96: break;
        case 33: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [138] { yybegin(YYINITIAL); return WRONG; }");
          { yybegin(YYINITIAL); return WRONG;
          }
        case 97: break;
        case 29: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [169] { return SHORTCOMMENT; }");
          { return SHORTCOMMENT;
          }
        case 98: break;
        case 4: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [184] { return NAME; }");
          { return NAME;
          }
        case 99: break;
        case 12: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [93] { yybegin(XSTRINGA); return STRING; }");
          { yybegin(XSTRINGA); return STRING;
          }
        case 100: break;
        case 26: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [119] { return COLON; }");
          { return COLON;
          }
        case 101: break;
        case 51: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [75] { return NOT; }");
          { return NOT;
          }
        case 102: break;
        case 50: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [62] { return AND; }");
          { return AND;
          }
        case 103: break;
        case 30: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [168] { yybegin(YYINITIAL); return SHORTCOMMENT; }");
          { yybegin(YYINITIAL); return SHORTCOMMENT;
          }
        case 104: break;
        case 31: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [177] { return LONGCOMMENT; }");
          { return LONGCOMMENT;
          }
        case 105: break;
        case 8: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [107] { return ASSIGN; }");
          { return ASSIGN;
          }
        case 106: break;
        case 44: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [99] { return GE; }");
          { return GE;
          }
        case 107: break;
        case 34: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [130] { yybegin(YYINITIAL); return STRING; }");
          { yybegin(YYINITIAL); return STRING;
          }
        case 108: break;
        case 1: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [189] { return WRONG; }");
          { return WRONG;
          }
        case 109: break;
        case 66: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [66] { return ELSEIF; }");
          { return ELSEIF;
          }
        case 110: break;
        case 62: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [81] { return UNTIL; }");
          { return UNTIL;
          }
        case 111: break;
        case 57: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [79] { return THEN; }");
          { return THEN;
          }
        case 112: break;
        case 38: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [64] { return DO; }");
          { return DO;
          }
        case 113: break;
        case 13: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [108] { return GT; }");
          { return GT;
          }
        case 114: break;
        case 60: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [73] { return LOCAL; }");
          { return LOCAL;
          }
        case 115: break;
        case 28: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [162] { return LONGSTRING; }");
          { return LONGSTRING;
          }
        case 116: break;
        case 55: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [65] { return ELSE; }");
          { return ELSE;
          }
        case 117: break;
        case 64: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [78] { return RETURN; }");
          { return RETURN;
          }
        case 118: break;
        case 63: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [82] { return WHILE; }");
          { return WHILE;
          }
        case 119: break;
        case 46: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [101] { return NE; }");
          { return NE;
          }
        case 120: break;
        case 9: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [102] { return MINUS; }");
          { return MINUS;
          }
        case 121: break;
        case 11: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [92] { yybegin(XSTRINGQ);  return STRING; }");
          { yybegin(XSTRINGQ);  return STRING;
          }
        case 122: break;
        case 52: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [74] { return NIL; }");
          { return NIL;
          }
        case 123: break;
        case 32: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [139] { return STRING; }");
          { return STRING;
          }
        case 124: break;
        case 56: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [80] { return TRUE; }");
          { return TRUE;
          }
        case 125: break;
        case 54: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [69] { return FOR; }");
          { return FOR;
          }
        case 126: break;
        case 18: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [110] { return LPAREN; }");
          { return LPAREN;
          }
        case 127: break;
        case 59: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [63] { return BREAK; }");
          { return BREAK;
          }
        case 128: break;
        case 19: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [111] { return RPAREN; }");
          { return RPAREN;
          }
        case 129: break;
        case 58: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [87] { yybegin( XLONGCOMMENT ); return LONGCOMMENT; }");
          { yybegin( XLONGCOMMENT ); return LONGCOMMENT;
          }
        case 130: break;
        case 37: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [98] { return EQ; }");
          { return EQ;
          }
        case 131: break;
        case 6: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [103] { return PLUS; }");
          { return PLUS;
          }
        case 132: break;
        case 47: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [159] { yybegin(YYINITIAL); return LONGSTRING; }");
          { yybegin(YYINITIAL); return LONGSTRING;
          }
        case 133: break;
        case 45: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [100] { return LE; }");
          { return LE;
          }
        case 134: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This main method is the debugging routine for the scanner.
   * It prints debugging information about each returned token to
   * System.out until the end of file is reached, or an error occured.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java _LuaLexer <inputfile>");
    }
    else {
      for (int i = 0; i < argv.length; i++) {
        _LuaLexer scanner = null;
        try {
          scanner = new _LuaLexer( new java.io.FileReader(argv[i]) );
          do {
            System.out.println(scanner.advance());
          } while (!scanner.zzAtEOF);

        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
