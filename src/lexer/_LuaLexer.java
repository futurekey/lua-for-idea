/* The following code was generated by JFlex 1.4.1 on 3/21/10 1:30 AM */

package com.sylvanaar.idea.Lua.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1
 * on 3/21/10 1:30 AM from the specification file
 * <tt>lua.flex</tt>
 */
class _LuaLexer implements FlexLexer, LuaTokenTypes {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;
  private static final String ZZ_NL = System.getProperty("line.separator");

  /** lexical states */
  public static final int XLONGSTRING = 1;
  public static final int XSTRINGA = 5;
  public static final int XLONGCOMMENT = 3;
  public static final int XSHORTCOMMENT = 2;
  public static final int YYINITIAL = 0;
  public static final int XSTRINGQ = 4;

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\1\1\3\2\0\1\2\22\0\1\1\1\0\1\37\1\53"+
    "\3\0\1\40\1\46\1\47\1\44\1\10\1\54\1\35\1\11\1\45"+
    "\12\6\1\55\1\0\1\42\1\12\1\41\2\0\4\4\1\7\25\4"+
    "\1\36\1\56\1\50\1\0\1\4\1\0\1\13\1\16\1\30\1\15"+
    "\1\20\1\26\1\4\1\33\1\25\1\4\1\21\1\23\1\4\1\14"+
    "\1\22\1\32\1\4\1\17\1\24\1\31\1\27\1\5\1\34\3\4"+
    "\1\51\1\57\1\52\1\43\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\6\0\1\1\1\2\2\3\1\4\1\2\1\5\1\6"+
    "\1\7\1\10\1\2\14\4\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\1\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\1\25\1\26\1\27\1\30\2\31\1\32\1\31"+
    "\1\33\1\34\1\31\1\35\1\36\2\0\1\37\1\40"+
    "\3\4\1\41\4\4\1\42\1\4\1\43\1\44\7\4"+
    "\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\5"+
    "\1\0\1\5\1\54\1\55\1\56\1\57\3\4\1\60"+
    "\3\4\1\61\5\4\2\0\1\46\3\4\1\62\4\4"+
    "\1\63\1\64\1\4\1\65\1\66\3\4\1\67\1\70"+
    "\1\4\1\71\1\72\1\73\1\74\1\75\2\4\1\76";

  private static int [] zzUnpackAction() {
    int [] result = new int[135];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\60\0\140\0\220\0\300\0\360\0\u0120\0\u0150"+
    "\0\u0180\0\u0120\0\u01b0\0\u01e0\0\u0210\0\u0120\0\u0240\0\u0270"+
    "\0\u02a0\0\u02d0\0\u0300\0\u0330\0\u0360\0\u0390\0\u03c0\0\u03f0"+
    "\0\u0420\0\u0450\0\u0480\0\u04b0\0\u04e0\0\u0510\0\u0540\0\u0120"+
    "\0\u0120\0\u0570\0\u05a0\0\u05d0\0\u0120\0\u0120\0\u0120\0\u0120"+
    "\0\u0120\0\u0120\0\u0120\0\u0120\0\u0120\0\u0120\0\u0120\0\u0600"+
    "\0\u0120\0\u0630\0\u0120\0\u0660\0\u0690\0\u0120\0\u06c0\0\u06f0"+
    "\0\u0720\0\u0750\0\u0120\0\u0780\0\u07b0\0\u07e0\0\u01b0\0\u0810"+
    "\0\u0840\0\u0870\0\u08a0\0\u01b0\0\u08d0\0\u01b0\0\u01b0\0\u0900"+
    "\0\u0930\0\u0960\0\u0990\0\u09c0\0\u09f0\0\u0a20\0\u0a50\0\u0a80"+
    "\0\u0120\0\u0120\0\u0120\0\u0120\0\u0120\0\u0ab0\0\u0ab0\0\u0ae0"+
    "\0\u0120\0\u01b0\0\u01b0\0\u01b0\0\u0b10\0\u0b40\0\u0b70\0\u01b0"+
    "\0\u0ba0\0\u0bd0\0\u0c00\0\u01b0\0\u0c30\0\u0c60\0\u0c90\0\u0cc0"+
    "\0\u0cf0\0\u0d20\0\u0a80\0\u0120\0\u0d50\0\u0d80\0\u0db0\0\u0de0"+
    "\0\u0e10\0\u0e40\0\u0e70\0\u0ea0\0\u01b0\0\u01b0\0\u0ed0\0\u0120"+
    "\0\u01b0\0\u0f00\0\u0f30\0\u0f60\0\u01b0\0\u01b0\0\u0f90\0\u01b0"+
    "\0\u01b0\0\u01b0\0\u01b0\0\u01b0\0\u0fc0\0\u0ff0\0\u01b0";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[135];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\13"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\13\1\27\1\30\1\13\1\31\1\32\1\33"+
    "\1\13\1\34\2\13\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51"+
    "\1\52\1\53\1\54\1\55\1\56\2\7\50\57\1\60"+
    "\11\57\2\61\124\57\1\62\11\57\2\63\33\57\1\64"+
    "\16\57\1\65\1\63\2\57\2\66\34\57\1\67\15\57"+
    "\1\65\1\66\61\0\1\10\3\0\1\10\5\0\1\10"+
    "\47\0\1\12\60\0\4\13\3\0\22\13\24\0\1\10"+
    "\2\0\1\13\1\14\2\13\3\0\1\14\21\13\31\0"+
    "\1\15\1\70\1\0\1\71\6\0\1\70\50\0\1\72"+
    "\60\0\1\73\46\0\1\10\2\0\1\13\1\14\2\13"+
    "\3\0\1\14\1\74\20\13\27\0\4\13\3\0\7\13"+
    "\1\75\2\13\1\76\7\13\27\0\4\13\3\0\7\13"+
    "\1\77\12\13\27\0\4\13\3\0\4\13\1\100\15\13"+
    "\27\0\4\13\3\0\5\13\1\101\14\13\27\0\4\13"+
    "\3\0\1\13\1\102\6\13\1\103\11\13\27\0\4\13"+
    "\3\0\4\13\1\104\15\13\27\0\4\13\3\0\7\13"+
    "\1\105\12\13\27\0\4\13\3\0\1\13\1\106\11\13"+
    "\1\107\6\13\27\0\4\13\3\0\1\110\6\13\1\111"+
    "\4\13\1\112\5\13\27\0\4\13\3\0\1\13\1\113"+
    "\20\13\27\0\4\13\3\0\4\13\1\114\13\13\1\115"+
    "\1\13\27\0\4\13\3\0\20\13\1\116\1\13\60\0"+
    "\1\117\60\0\1\120\33\0\1\121\57\0\1\122\57\0"+
    "\1\123\115\0\1\124\57\0\1\125\46\0\1\57\23\0"+
    "\1\57\1\0\1\57\5\0\2\57\1\0\2\57\6\0"+
    "\1\57\2\0\1\57\4\0\3\57\7\0\1\57\47\0"+
    "\1\57\25\0\1\126\1\0\1\127\24\0\1\127\30\0"+
    "\1\130\62\0\1\131\52\0\4\13\3\0\2\13\1\132"+
    "\17\13\27\0\4\13\3\0\16\13\1\133\3\13\27\0"+
    "\4\13\3\0\10\13\1\134\11\13\27\0\4\13\3\0"+
    "\5\13\1\135\14\13\27\0\4\13\3\0\16\13\1\136"+
    "\1\137\2\13\27\0\4\13\3\0\2\13\1\140\17\13"+
    "\27\0\4\13\3\0\11\13\1\141\10\13\27\0\4\13"+
    "\3\0\15\13\1\142\4\13\27\0\4\13\3\0\10\13"+
    "\1\143\11\13\27\0\4\13\3\0\4\13\1\144\15\13"+
    "\27\0\4\13\3\0\1\13\1\145\20\13\27\0\4\13"+
    "\3\0\16\13\1\146\3\13\27\0\4\13\3\0\14\13"+
    "\1\147\5\13\27\0\4\13\3\0\5\13\1\150\14\13"+
    "\27\0\4\13\3\0\12\13\1\151\7\13\61\0\1\152"+
    "\22\0\1\153\1\0\1\154\1\0\1\153\5\0\1\153"+
    "\52\0\1\126\57\0\1\130\1\70\10\0\1\70\43\0"+
    "\4\13\3\0\1\155\21\13\27\0\4\13\3\0\14\13"+
    "\1\156\5\13\27\0\4\13\3\0\5\13\1\157\14\13"+
    "\27\0\4\13\3\0\5\13\1\160\14\13\27\0\4\13"+
    "\3\0\1\161\21\13\27\0\4\13\3\0\11\13\1\162"+
    "\10\13\27\0\4\13\3\0\15\13\1\163\4\13\27\0"+
    "\4\13\3\0\12\13\1\164\7\13\27\0\4\13\3\0"+
    "\5\13\1\165\14\13\27\0\4\13\3\0\1\13\1\166"+
    "\20\13\27\0\4\13\3\0\10\13\1\167\11\13\61\0"+
    "\1\170\25\0\4\13\3\0\6\13\1\171\13\13\27\0"+
    "\4\13\3\0\4\13\1\172\15\13\27\0\4\13\3\0"+
    "\1\173\21\13\27\0\4\13\3\0\12\13\1\174\7\13"+
    "\27\0\4\13\3\0\10\13\1\175\11\13\27\0\4\13"+
    "\3\0\5\13\1\176\14\13\27\0\4\13\3\0\16\13"+
    "\1\177\3\13\27\0\4\13\3\0\10\13\1\200\11\13"+
    "\27\0\4\13\3\0\5\13\1\201\14\13\27\0\4\13"+
    "\3\0\1\13\1\202\20\13\27\0\4\13\3\0\16\13"+
    "\1\203\3\13\27\0\4\13\3\0\13\13\1\204\6\13"+
    "\27\0\4\13\3\0\12\13\1\205\7\13\27\0\4\13"+
    "\3\0\7\13\1\206\12\13\27\0\4\13\3\0\1\13"+
    "\1\207\20\13\23\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[4128];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\6\0\1\11\2\1\1\11\3\1\1\11\21\1\2\11"+
    "\3\1\13\11\1\1\1\11\1\1\1\11\2\1\1\11"+
    "\1\1\2\0\1\1\1\11\25\1\5\11\1\1\1\0"+
    "\1\1\1\11\20\1\2\0\1\11\13\1\1\11\17\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[135];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    int yyline, yychar, yycolumn;
    
    private StringBuffer morePrefix = new StringBuffer();
    private boolean clearMorePrefix;

    // same functionality as Flex's yymore()
    public void cleanMore() {
        this.clearMorePrefix = true;
    }
    public void more() {
        this.morePrefix.append(this.yytext());
        this.clearMorePrefix = false;
    }

    // wrapper around yytext() allowing the usage of more()
    public final String text() {
        return (this.morePrefix.toString() + this.yytext());
    }

    // wrapper around yylength() allowing the usage of more()
    public final int length() {
        return this.morePrefix.length() + this.yylength();
    }

    // wrapper around yycharat() allowing the usage of more()
    public final char charat(int pos) {
        if (pos < this.morePrefix.length()) {
            return this.morePrefix.charAt(pos);
        } else {
            return this.yycharat(pos - this.morePrefix.length());
        }
    }

    // wrapper around yylex() deleting the morePrefix
    public IElementType advance() throws java.io.IOException {
        IElementType ret = lex();
        this.morePrefix.setLength(0);
        this.clearMorePrefix = true;
        return ret;
    }




  _LuaLexer(java.io.Reader in) {
  
   
    this.morePrefix = new StringBuffer();
    this.clearMorePrefix = true;

    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  _LuaLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 130) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  public void reset(CharSequence buffer, int initialState){
    reset(buffer, 0, buffer.length(), initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType lex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL.charAt(zzCurrentPosL)) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL.charAt(zzMarkedPosL) == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL.charAt(zzMarkedPosL) == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = zzLexicalState;


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL.charAt(zzCurrentPosL++);
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL.charAt(zzCurrentPosL++);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 36: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [113] { return IF; }");
          { return IF;
          }
        case 63: break;
        case 62: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [112] { return FUNCTION; }");
          { return FUNCTION;
          }
        case 64: break;
        case 14: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [150] { return LT; }");
          { return LT;
          }
        case 65: break;
        case 48: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [109] { return END; }");
          { return END;
          }
        case 66: break;
        case 31: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [139] { return CONCAT; }");
          { return CONCAT;
          }
        case 67: break;
        case 30: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [189] { yybegin(YYINITIAL); text(); return STRING; }");
          { yybegin(YYINITIAL); text(); return STRING;
          }
        case 68: break;
        case 15: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [146] { return MULT; }");
          { return MULT;
          }
        case 69: break;
        case 2: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [137] { return WS; }");
          { return WS;
          }
        case 70: break;
        case 3: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [163] { return NEWLINE; }");
          { return NEWLINE;
          }
        case 71: break;
        case 25: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [208] { more(); }");
          { more();
          }
        case 72: break;
        case 42: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [205] { yybegin(YYINITIAL); text(); return LONGSTRING; }");
          { yybegin(YYINITIAL); text(); return LONGSTRING;
          }
        case 73: break;
        case 10: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [153] { return LBRACK; }");
          { return LBRACK;
          }
        case 74: break;
        case 43: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [220] { yybegin(YYINITIAL); text(); return LONGCOMMENT; }");
          { yybegin(YYINITIAL); text(); return LONGCOMMENT;
          }
        case 75: break;
        case 12: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [135] { more(); yybegin(XSTRINGA); }");
          { more(); yybegin(XSTRINGA);
          }
        case 76: break;
        case 19: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [154] { return RBRACK; }");
          { return RBRACK;
          }
        case 77: break;
        case 26: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [214] { yybegin(YYINITIAL); text(); return SHORTCOMMENT; }");
          { yybegin(YYINITIAL); text(); return SHORTCOMMENT;
          }
        case 78: break;
        case 22: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [157] { return GETN; }");
          { return GETN;
          }
        case 79: break;
        case 60: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [119] { return REPEAT; }");
          { return REPEAT;
          }
        case 80: break;
        case 44: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [138] { return ELLIPSIS; }");
          { return ELLIPSIS;
          }
        case 81: break;
        case 20: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [155] { return LCURLY; }");
          { return LCURLY;
          }
        case 82: break;
        case 5: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [126] { return NUMBER; }");
          { return NUMBER;
          }
        case 83: break;
        case 21: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [156] { return RCURLY; }");
          { return RCURLY;
          }
        case 84: break;
        case 56: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [110] { return FALSE; }");
          { return FALSE;
          }
        case 85: break;
        case 23: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [158] { return COMMA; }");
          { return COMMA;
          }
        case 86: break;
        case 7: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [161] { return DOT; }");
          { return DOT;
          }
        case 87: break;
        case 11: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [134] { more(); yybegin(XSTRINGQ); }");
          { more(); yybegin(XSTRINGQ);
          }
        case 88: break;
        case 35: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [114] { return IN; }");
          { return IN;
          }
        case 89: break;
        case 34: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [118] { return OR; }");
          { return OR;
          }
        case 90: break;
        case 16: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [147] { return DIV; }");
          { return DIV;
          }
        case 91: break;
        case 4: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [230] { return NAME; }");
          { return NAME;
          }
        case 92: break;
        case 24: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [160] { return COLON; }");
          { return COLON;
          }
        case 93: break;
        case 46: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [117] { return NOT; }");
          { return NOT;
          }
        case 94: break;
        case 45: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [104] { return AND; }");
          { return AND;
          }
        case 95: break;
        case 8: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [148] { return ASSIGN; }");
          { return ASSIGN;
          }
        case 96: break;
        case 39: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [141] { return GE; }");
          { return GE;
          }
        case 97: break;
        case 28: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [171] { yybegin(YYINITIAL); return STRING; }");
          { yybegin(YYINITIAL); return STRING;
          }
        case 98: break;
        case 1: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [235] { return WRONG; }");
          { return WRONG;
          }
        case 99: break;
        case 38: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [132] { more(); yybegin( XLONGSTRING ); }");
          { more(); yybegin( XLONGSTRING );
          }
        case 100: break;
        case 29: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [196] { yybegin(YYINITIAL);"+ZZ_NL+"                      return WRONG; }");
          { yybegin(YYINITIAL);
                      return WRONG;
          }
        case 101: break;
        case 61: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [108] { return ELSEIF; }");
          { return ELSEIF;
          }
        case 102: break;
        case 57: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [123] { return UNTIL; }");
          { return UNTIL;
          }
        case 103: break;
        case 52: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [121] { return THEN; }");
          { return THEN;
          }
        case 104: break;
        case 33: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [106] { return DO; }");
          { return DO;
          }
        case 105: break;
        case 13: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [149] { return GT; }");
          { return GT;
          }
        case 106: break;
        case 55: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [115] { return LOCAL; }");
          { return LOCAL;
          }
        case 107: break;
        case 50: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [107] { return ELSE; }");
          { return ELSE;
          }
        case 108: break;
        case 59: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [120] { return RETURN; }");
          { return RETURN;
          }
        case 109: break;
        case 58: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [124] { return WHILE; }");
          { return WHILE;
          }
        case 110: break;
        case 41: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [143] { return NE; }");
          { return NE;
          }
        case 111: break;
        case 9: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [144] { return MINUS; }");
          { return MINUS;
          }
        case 112: break;
        case 47: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [116] { return NIL; }");
          { return NIL;
          }
        case 113: break;
        case 51: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [122] { return TRUE; }");
          { return TRUE;
          }
        case 114: break;
        case 49: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [111] { return FOR; }");
          { return FOR;
          }
        case 115: break;
        case 17: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [151] { return LPAREN; }");
          { return LPAREN;
          }
        case 116: break;
        case 54: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [105] { return BREAK; }");
          { return BREAK;
          }
        case 117: break;
        case 27: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [178] { yybegin(YYINITIAL);"+ZZ_NL+""+ZZ_NL+"                    return WRONG; }");
          { yybegin(YYINITIAL);

                    return WRONG;
          }
        case 118: break;
        case 18: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [152] { return RPAREN; }");
          { return RPAREN;
          }
        case 119: break;
        case 32: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [140] { return EQ; }");
          { return EQ;
          }
        case 120: break;
        case 6: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [145] { return PLUS; }");
          { return PLUS;
          }
        case 121: break;
        case 53: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [129] { more(); yybegin( XLONGCOMMENT ); }");
          { more(); yybegin( XLONGCOMMENT );
          }
        case 122: break;
        case 40: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [142] { return LE; }");
          { return LE;
          }
        case 123: break;
        case 37: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [130] { more(); yybegin( XSHORTCOMMENT ); }");
          { more(); yybegin( XSHORTCOMMENT );
          }
        case 124: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This main method is the debugging routine for the scanner.
   * It prints debugging information about each returned token to
   * System.out until the end of file is reached, or an error occured.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java _LuaLexer <inputfile>");
    }
    else {
      for (int i = 0; i < argv.length; i++) {
        _LuaLexer scanner = null;
        try {
          scanner = new _LuaLexer( new java.io.FileReader(argv[i]) );
          do {
            System.out.println(scanner.lex());
          } while (!scanner.zzAtEOF);

        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
