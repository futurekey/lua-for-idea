/* The following code was generated by JFlex 1.4.1 on 3/6/10 2:01 PM */

package com.sylvanaar.idea.Lua.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import java.util.*;
import java.lang.reflect.Field;
import org.jetbrains.annotations.NotNull;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1
 * on 3/6/10 2:01 PM from the specification file
 * <tt>lua.flex</tt>
 */
class _LuaLexer implements FlexLexer, LuaTokenTypes {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int XLONGSTRING = 2;
  public static final int XSTRINGA = 10;
  public static final int XLONGCOMMENT = 6;
  public static final int XSHORTCOMMENT = 4;
  public static final int YYINITIAL = 0;
  public static final int XSTRINGQ = 8;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6, 6
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\1\1\10\2\0\1\52\22\0\1\1\1\0\1\53\1\11"+
    "\3\0\1\54\1\44\1\45\1\42\1\6\1\0\1\34\1\7\1\43"+
    "\12\4\1\51\1\0\1\40\1\36\1\37\2\0\4\2\1\5\25\2"+
    "\1\35\1\55\1\46\1\0\1\2\1\0\1\12\1\15\1\27\1\14"+
    "\1\17\1\25\1\2\1\32\1\24\1\2\1\20\1\22\1\2\1\13"+
    "\1\21\1\31\1\2\1\16\1\23\1\30\1\26\1\3\1\33\3\2"+
    "\1\47\1\56\1\50\1\41\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\7\0\1\1\1\2\1\3\1\2\1\4\1\5\1\6"+
    "\1\7\1\10\1\2\14\3\1\11\1\12\1\13\1\14"+
    "\1\15\1\1\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\1\25\1\26\1\27\1\10\2\30\1\31\1\30"+
    "\1\32\1\33\1\30\1\34\1\35\2\0\1\36\3\3"+
    "\1\37\4\3\1\40\1\3\1\41\1\42\7\3\1\43"+
    "\1\44\1\45\1\46\1\47\1\50\1\0\1\51\1\52"+
    "\1\0\1\4\1\0\1\4\1\53\1\54\1\55\1\56"+
    "\3\3\1\57\3\3\1\60\5\3\2\0\1\44\1\0"+
    "\3\3\1\61\4\3\1\62\1\63\1\3\1\64\1\65"+
    "\1\66\3\3\1\67\1\70\1\3\1\71\1\72\1\73"+
    "\1\74\1\75\2\3\1\76";

  private static int [] zzUnpackAction() {
    int [] result = new int[139];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\57\0\136\0\215\0\274\0\353\0\u011a\0\u0149"+
    "\0\u0178\0\u01a7\0\u01d6\0\u0205\0\u0149\0\u0234\0\u0149\0\u0149"+
    "\0\u0263\0\u0292\0\u02c1\0\u02f0\0\u031f\0\u034e\0\u037d\0\u03ac"+
    "\0\u03db\0\u040a\0\u0439\0\u0468\0\u0497\0\u04c6\0\u04f5\0\u0524"+
    "\0\u0553\0\u0582\0\u05b1\0\u0149\0\u0149\0\u0149\0\u0149\0\u0149"+
    "\0\u0149\0\u0149\0\u0149\0\u0149\0\u0149\0\u05e0\0\u0149\0\u060f"+
    "\0\u0149\0\u063e\0\u0149\0\u066d\0\u069c\0\u0149\0\u06cb\0\u06fa"+
    "\0\u0729\0\u0758\0\u0787\0\u07b6\0\u07e5\0\u01a7\0\u0814\0\u0843"+
    "\0\u0872\0\u08a1\0\u01a7\0\u08d0\0\u01a7\0\u01a7\0\u08ff\0\u092e"+
    "\0\u095d\0\u098c\0\u09bb\0\u09ea\0\u0a19\0\u0a48\0\u0a77\0\u0149"+
    "\0\u0149\0\u0149\0\u0149\0\u05e0\0\u0aa6\0\u0149\0\u0ad5\0\u0b04"+
    "\0\u0b04\0\u0b33\0\u0149\0\u01a7\0\u01a7\0\u01a7\0\u0b62\0\u0b91"+
    "\0\u0bc0\0\u01a7\0\u0bef\0\u0c1e\0\u0c4d\0\u01a7\0\u0c7c\0\u0cab"+
    "\0\u0cda\0\u0d09\0\u0d38\0\u0d67\0\u0a77\0\u0149\0\u0d96\0\u0dc5"+
    "\0\u0df4\0\u0e23\0\u0e52\0\u0e81\0\u0eb0\0\u0edf\0\u0f0e\0\u01a7"+
    "\0\u01a7\0\u0f3d\0\u0149\0\u0149\0\u01a7\0\u0f6c\0\u0f9b\0\u0fca"+
    "\0\u01a7\0\u01a7\0\u0ff9\0\u01a7\0\u01a7\0\u01a7\0\u01a7\0\u01a7"+
    "\0\u1028\0\u1057\0\u01a7";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[139];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\10\1\11\1\12\1\13\1\14\1\12\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\12\1\27\1\30\1\12\1\31\1\32\1\33\1\12"+
    "\1\34\2\12\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52"+
    "\1\53\1\17\1\54\1\55\3\10\1\11\1\12\1\13"+
    "\1\14\1\12\1\15\1\16\1\17\1\56\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\1\12\1\27\1\30\1\12"+
    "\1\31\1\32\1\33\1\12\1\34\2\12\1\35\1\36"+
    "\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46"+
    "\1\47\1\50\1\51\1\52\1\53\1\17\1\54\1\55"+
    "\2\10\46\57\1\60\20\57\1\61\41\57\1\61\52\57"+
    "\1\62\20\57\1\63\41\57\1\63\1\64\1\57\1\65"+
    "\1\63\10\57\1\66\41\57\1\66\1\57\1\67\1\65"+
    "\1\66\60\0\1\11\1\0\1\11\6\0\1\11\46\0"+
    "\4\12\4\0\22\12\24\0\1\11\1\12\1\13\2\12"+
    "\4\0\1\13\21\12\27\0\1\14\1\70\1\0\1\71"+
    "\7\0\1\70\46\0\1\72\50\0\1\11\1\12\1\13"+
    "\2\12\4\0\1\13\1\73\20\12\25\0\4\12\4\0"+
    "\7\12\1\74\2\12\1\75\7\12\25\0\4\12\4\0"+
    "\7\12\1\76\12\12\25\0\4\12\4\0\4\12\1\77"+
    "\15\12\25\0\4\12\4\0\5\12\1\100\14\12\25\0"+
    "\4\12\4\0\1\12\1\101\6\12\1\102\11\12\25\0"+
    "\4\12\4\0\4\12\1\103\15\12\25\0\4\12\4\0"+
    "\7\12\1\104\12\12\25\0\4\12\4\0\1\12\1\105"+
    "\11\12\1\106\6\12\25\0\4\12\4\0\1\107\6\12"+
    "\1\110\4\12\1\111\5\12\25\0\4\12\4\0\1\12"+
    "\1\112\20\12\25\0\4\12\4\0\4\12\1\113\13\12"+
    "\1\114\1\12\25\0\4\12\4\0\20\12\1\115\1\12"+
    "\57\0\1\116\57\0\1\117\57\0\1\120\56\0\1\121"+
    "\56\0\1\122\56\0\1\123\20\0\10\124\1\125\46\124"+
    "\46\0\1\126\56\0\1\127\63\0\1\57\6\0\1\57"+
    "\4\0\1\57\1\0\2\57\1\0\2\57\6\0\1\57"+
    "\2\0\1\57\4\0\1\57\10\0\1\57\4\0\2\57"+
    "\56\0\1\57\6\0\1\130\1\0\1\131\25\0\1\131"+
    "\26\0\1\132\61\0\1\133\51\0\4\12\4\0\2\12"+
    "\1\134\17\12\25\0\4\12\4\0\16\12\1\135\3\12"+
    "\25\0\4\12\4\0\10\12\1\136\11\12\25\0\4\12"+
    "\4\0\5\12\1\137\14\12\25\0\4\12\4\0\16\12"+
    "\1\140\1\141\2\12\25\0\4\12\4\0\2\12\1\142"+
    "\17\12\25\0\4\12\4\0\11\12\1\143\10\12\25\0"+
    "\4\12\4\0\15\12\1\144\4\12\25\0\4\12\4\0"+
    "\10\12\1\145\11\12\25\0\4\12\4\0\4\12\1\146"+
    "\15\12\25\0\4\12\4\0\1\12\1\147\20\12\25\0"+
    "\4\12\4\0\16\12\1\150\3\12\25\0\4\12\4\0"+
    "\14\12\1\151\5\12\25\0\4\12\4\0\5\12\1\152"+
    "\14\12\25\0\4\12\4\0\12\12\1\153\7\12\60\0"+
    "\1\154\22\0\1\155\1\0\1\155\4\0\1\156\1\0"+
    "\1\155\44\0\57\125\34\0\1\157\26\0\1\130\56\0"+
    "\1\132\1\70\11\0\1\70\41\0\4\12\4\0\1\160"+
    "\21\12\25\0\4\12\4\0\14\12\1\161\5\12\25\0"+
    "\4\12\4\0\5\12\1\162\14\12\25\0\4\12\4\0"+
    "\5\12\1\163\14\12\25\0\4\12\4\0\1\164\21\12"+
    "\25\0\4\12\4\0\11\12\1\165\10\12\25\0\4\12"+
    "\4\0\15\12\1\166\4\12\25\0\4\12\4\0\12\12"+
    "\1\167\7\12\25\0\4\12\4\0\5\12\1\170\14\12"+
    "\25\0\4\12\4\0\1\12\1\171\20\12\25\0\4\12"+
    "\4\0\10\12\1\172\11\12\60\0\1\173\55\0\1\174"+
    "\24\0\4\12\4\0\6\12\1\175\13\12\25\0\4\12"+
    "\4\0\4\12\1\176\15\12\25\0\4\12\4\0\1\177"+
    "\21\12\25\0\4\12\4\0\12\12\1\200\7\12\25\0"+
    "\4\12\4\0\10\12\1\201\11\12\25\0\4\12\4\0"+
    "\5\12\1\202\14\12\25\0\4\12\4\0\16\12\1\203"+
    "\3\12\25\0\4\12\4\0\10\12\1\204\11\12\25\0"+
    "\4\12\4\0\5\12\1\205\14\12\25\0\4\12\4\0"+
    "\1\12\1\206\20\12\25\0\4\12\4\0\16\12\1\207"+
    "\3\12\25\0\4\12\4\0\13\12\1\210\6\12\25\0"+
    "\4\12\4\0\12\12\1\211\7\12\25\0\4\12\4\0"+
    "\7\12\1\212\12\12\25\0\4\12\4\0\1\12\1\213"+
    "\20\12\23\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[4230];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\7\0\1\11\4\1\1\11\1\1\2\11\23\1\12\11"+
    "\1\1\1\11\1\1\1\11\1\1\1\11\2\1\1\11"+
    "\1\1\2\0\26\1\4\11\1\0\1\1\1\11\1\0"+
    "\1\1\1\0\1\1\1\11\20\1\2\0\1\11\1\0"+
    "\13\1\2\11\17\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[139];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */

  private Stack <IElementType> gStringStack = new Stack<IElementType>();
  private Stack <IElementType> blockStack = new Stack<IElementType>();

  private int afterComment = YYINITIAL;
  private int afterNls = YYINITIAL;
  private int afterBrace = YYINITIAL;

  private void clearStacks(){
    gStringStack.clear();
    blockStack.clear();
  }

  private Stack<IElementType> braceCount = new Stack <IElementType>();



  _LuaLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  _LuaLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 130) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  public void reset(CharSequence buffer, int initialState){
    reset(buffer, 0, buffer.length(), initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      if (zzMarkedPosL > zzStartRead) {
        switch (zzBufferL.charAt(zzMarkedPosL-1)) {
        case '\n':
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          zzAtBOL = true;
          break;
        case '\r': 
          if (zzMarkedPosL < zzEndReadL)
            zzAtBOL = zzBufferL.charAt(zzMarkedPosL) != '\n';
          else if (zzAtEOF)
            zzAtBOL = false;
          else {
            boolean eof = zzRefill();
            zzMarkedPosL = zzMarkedPos;
            zzEndReadL = zzEndRead;
            zzBufferL = zzBuffer;
            if (eof) 
              zzAtBOL = false;
            else 
              zzAtBOL = zzBufferL.charAt(zzMarkedPosL) != '\n';
          }
          break;
        default:
          zzAtBOL = false;
        }
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      if (zzAtBOL)
        zzState = ZZ_LEXSTATE[zzLexicalState+1];
      else
        zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL.charAt(zzCurrentPosL++);
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL.charAt(zzCurrentPosL++);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 52: 
          { advance(); yybegin( XLONGCOMMENT );
          }
        case 63: break;
        case 34: 
          { return IF;
          }
        case 64: break;
        case 62: 
          { return FUNCTION;
          }
        case 65: break;
        case 36: 
          { advance(); yybegin( XLONGSTRING );
          }
        case 66: break;
        case 42: 
          { yybegin(0); return LONGSTRING;
          }
        case 67: break;
        case 13: 
          { return LT;
          }
        case 68: break;
        case 23: 
          { advance(); yybegin(XSTRINGA);
          }
        case 69: break;
        case 47: 
          { return END;
          }
        case 70: break;
        case 30: 
          { return CONCAT;
          }
        case 71: break;
        case 14: 
          { return MULT;
          }
        case 72: break;
        case 2: 
          { return WS;
          }
        case 73: break;
        case 28: 
          { yybegin(0);
                      return UNTERMINATED_STRING;
          }
        case 74: break;
        case 7: 
          { return NEWLINE;
          }
        case 75: break;
        case 10: 
          { return LBRACK;
          }
        case 76: break;
        case 18: 
          { return RBRACK;
          }
        case 77: break;
        case 22: 
          { advance(); yybegin(XSTRINGQ);
          }
        case 78: break;
        case 8: 
          { return GETN;
          }
        case 79: break;
        case 60: 
          { return REPEAT;
          }
        case 80: break;
        case 43: 
          { return ELLIPSIS;
          }
        case 81: break;
        case 29: 
          { yybegin(0); return STRING;
          }
        case 82: break;
        case 19: 
          { return LCURLY;
          }
        case 83: break;
        case 4: 
          { return NUMBER;
          }
        case 84: break;
        case 20: 
          { return RCURLY;
          }
        case 85: break;
        case 56: 
          { return FALSE;
          }
        case 86: break;
        case 35: 
          { advance(); yybegin( XSHORTCOMMENT );
          }
        case 87: break;
        case 6: 
          { return DOT;
          }
        case 88: break;
        case 33: 
          { return IN;
          }
        case 89: break;
        case 32: 
          { return OR;
          }
        case 90: break;
        case 15: 
          { return DIV;
          }
        case 91: break;
        case 3: 
          { return NAME;
          }
        case 92: break;
        case 21: 
          { return COLON;
          }
        case 93: break;
        case 45: 
          { return NOT;
          }
        case 94: break;
        case 44: 
          { return AND;
          }
        case 95: break;
        case 11: 
          { return ASSIGN;
          }
        case 96: break;
        case 53: 
          { yybegin(0); return LONGCOMMENT;
          }
        case 97: break;
        case 38: 
          { return GE;
          }
        case 98: break;
        case 27: 
          { yybegin(YYINITIAL); return STRING;
          }
        case 99: break;
        case 1: 
          { return WRONG;
          }
        case 100: break;
        case 26: 
          { yybegin(YYINITIAL);
                     
                    return UNTERMINATED_STRING;
          }
        case 101: break;
        case 61: 
          { return ELSEIF;
          }
        case 102: break;
        case 57: 
          { return UNTIL;
          }
        case 103: break;
        case 51: 
          { return THEN;
          }
        case 104: break;
        case 31: 
          { return DO;
          }
        case 105: break;
        case 12: 
          { return GT;
          }
        case 106: break;
        case 55: 
          { return LOCAL;
          }
        case 107: break;
        case 41: 
          { return null;
          }
        case 108: break;
        case 49: 
          { return ELSE;
          }
        case 109: break;
        case 59: 
          { return RETURN;
          }
        case 110: break;
        case 24: 
          { advance();
          }
        case 111: break;
        case 58: 
          { return WHILE;
          }
        case 112: break;
        case 25: 
          { yybegin(0); return SHORTCOMMENT;
          }
        case 113: break;
        case 40: 
          { return NE;
          }
        case 114: break;
        case 9: 
          { return MINUS;
          }
        case 115: break;
        case 46: 
          { return NIL;
          }
        case 116: break;
        case 50: 
          { return TRUE;
          }
        case 117: break;
        case 48: 
          { return FOR;
          }
        case 118: break;
        case 16: 
          { return LPAREN;
          }
        case 119: break;
        case 54: 
          { return BREAK;
          }
        case 120: break;
        case 17: 
          { return RPAREN;
          }
        case 121: break;
        case 37: 
          { return EQ;
          }
        case 122: break;
        case 5: 
          { return PLUS;
          }
        case 123: break;
        case 39: 
          { return LE;
          }
        case 124: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
